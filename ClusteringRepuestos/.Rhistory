library(DBI)
con <- dbConnect(odbc::odbc(), "DemoData")
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
source("~/.active-rstudio-document", echo=TRUE)
library(DBI)
library(DBI)
library(DBI)
library(DBI)
library(DBI)
library(DBI)
library(DBI)
con <- dbConnect(odbc::odbc(), "DemoData")
library(DBI)
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
install.packages("ggplot2")
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
install.packages("RSQLServer")
library("RSQLServer")
library("RSQLServer")
library("RSQLServer")
library("RSQLServer")
library("RSQLServer")
library("RSQLServer")
library("RSQLServer")
install.packages("RSQLServer")
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
library(DBI)
library(odbc)
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "localhost",
Database = "RepuestosWeb")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "Admisiones_DWH", User = "Admin", Password = "12345",
timeout = 10)
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 1000)
View(con)
View(con)
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
View(dfsql)
head(dfsql)
class(dfsql)
Repuestos <- scale(dfsql) #
View(dfsql)
Repuestos <- scale(dfsql[1:4])
Repuestos <- scale(dfsql[2:4])
View(Repuestos)
Repuestos <- scale(dfsql)
dfsql
df2 <- data.frame(dfsql,row.names = Nombre)
df2 <- data.frame(dfsql,row.names = cat.Nombre)
df2 <- data.frame(dfsql,row.names = dfsql[1])
Repuestos <- scale(dfsql)
Repuestos <- na.omit(dfsql)
RepuestoNombre <- subset(Repuestos, select =- c(Nombre))
View(RepuestoNombre)
View(RepuestoNombre)
RepuestosFinales <- subset(Repuestos,select=c(Nombre,TotalPorParte))
View(RepuestosFinales)
RepuestosFinales = na.omit(RepuestosFinales)
remove(RepuestosFinales)
View(RepuestoNombre)
Repuestos <- na.omit(dfsql)
RepuestoNombre <- subset(Repuestos, select =- c(Nombre))
View(RepuestoNombre)
set.seed(Repuestos[2])
set.seed(Repuestos[1])
RepuestoNombre <- subset(Repuestos, select = c(Nombre))
View(RepuestoNombre)
dfsql
dfsql = dbGetQuery(con,"
select * from NombrePromediosTotal
")
View(dfsql)
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
dfsql = dbGetQuery(con,"
select * from NombrePromediosTotal
")
dfsql
Repuestos <- na.omit(dfsql)
Repuestos <- scale(dfsql)
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
Repuestos <- na.omit(dfsql)
Repuestos <- scale(Repuestos)
View(dfsql)
View(dfsql)
dfsql
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
Repuestos <- scale(Repuestos)
dfsql
View(dfsql)
Repuestos <- na.omit(dfsql)
#quitar los registros que estan en null
RepuestoNombre <- subset(Repuestos, select = c(Nombre))
View(RepuestoNombre)
RepuestoNombre <- subset(Repuestos, select =- c(Nombre))
View(RepuestoNombre)
Repuestos <- scale(RepuestosNombre)
Repuestos <- scale(RepuestoNombre)
View(Repuestos)
Repuestos <- subset(Repuestos, select = c(Nombre,Repuestos))
Nombre <- subset(dssql, select = c(Nombre))
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
Repuestos <- na.omit(dfsql)
RepuestoNombre <- subset(Repuestos, select =- c(Nombre))
Nombre <- subset(Repuestos, select = c(Nombre))
View(Nombre)
Repuestos <- scale(RepuestoNombre)
View(Repuestos)
Repuestos <- subset(Repuestos, select = c(Nombre,Repuestos))
typeof(Nombre)
class(Nombre)
typeof(Repuestos)
dfsql <- dfsql$Nombre
dfsql
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
rownames(dfsql) <- dfsql$Nombre
dfsql
View(dfsql)
RepuestoNombre <- subset(Repuestos, select =- c(Nombre))
Repuestos <- na.omit(dfsql)
View(Repuestos)
RepuestoNombre <- subset(Repuestos, select = -c(Nombre))
View(RepuestoNombre)
View(Repuestos)
Repuestos <- scale(RepuestoNombre)
View(RepuestoNombre)
View(Repuestos)
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
dfsql
rownames(dfsql) <- dfsql$Nombre
dfsql
RepuestoNombre <- subset(Repuestos, select = -c(Nombre))
RepuestoNombre <- subset(dfsql, select = -c(Nombre))
View(RepuestoNombre)
Repuestos <- scale(RepuestoNombre)
Repuestos <- na.omit(Repuestos)
Repuestos
head(dfsql)
head(Repuestos)
install.packages("factoextra") #paquete para graficar
library(factoextra) #libreria de paquete instalado
distancia <- get_dist(Repuestos)
fviz_dist(distancia, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(123) #seed permitira fijar un id para generar valores random
clusterk2 <- kmeans(Repuestos, 2, nstart = 25)
print(clusterk2)
asignacion a cluster
clusterk2$cluster
#Tama?o de cada cluster
clusterk2$size
#Centros de los 4 clusters
clusterk2$centers
clusterk2$cluster
clusterk2$size
clusterk2$centers
clusterk2$totss
clusterk2$withinss
clusterk2$tot.withinss
clusterk2$betweenss
clusterk2$iter
clusterk2$ifault
fviz_cluster(clusterk2, data = Repuestos)
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
fviz_cluster(clusterk2, data = Repuestos)
library(dplyr)
fviz_cluster(clusterk2, data = Repuestos)
install.packages("dplyr")
library(dplyr)
library(dplyr)
fviz_cluster(clusterk2, data = Repuestos)
fviz_cluster(clusterk2, data = Repuestos)
install.packages("factoextra") #paquete para graficar
library(factoextra) #libreria de paquete instalado
fviz_cluster(clusterk2, data = Repuestos)
clusterk3 <- kmeans(Repuestos, 3, nstart = 25)
clusterk4 <- kmeans(Repuestos, 4, nstart = 25)
clusterk5 <- kmeans(Repuestos, 5, nstart = 25)
grafica1 <- fviz_cluster(clusterk2, geom = "point", data = Repuestos) + ggtitle("k = 2")
grafica2 <- fviz_cluster(clusterk3, geom = "point",  data = Repuestos) + ggtitle("k = 3")
grafica3 <- fviz_cluster(clusterk4, geom = "point",  data = Repuestos) + ggtitle("k = 4")
grafica4 <- fviz_cluster(clusterk5, geom = "point",  data = Repuestos) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(grafica1, grafica2, grafica3, grafica4, nrow = 2)
clusterk6 <- kmeans(Repuestos, 6, nstart = 25)
grafica5 <- fviz_cluster(clusterk6, geom = "point",  data = Repuestos) + ggtitle("k = 6")
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5 ,nrow = 2)
fviz_nbclust(Repuestos, kmeans, method = "wss")
fviz_nbclust(Repuestos, kmeans, method = "wss") +
geom_vline(xintercept = 5, linetype = 2)
fviz_nbclust(Repuestos, kmeans, method = "wss") +
geom_vline(xintercept = 6, linetype = 2)
EstadosCluster4<-as.data.frame(clusterk4$cluster)
arrestrosRaw<-dfsql
arrestrosRaw
tst<-merge(EstadosCluster4,arrestrosRaw,by=0, all=TRUE)
names(tst)[2]<-"clustno"
tst<-subset(tst, select=-c(Row.names))
aggregate(tst,by=list(tst$clustno),FUN=mean)
dfsql = dbGetQuery(con,"
select cat.Nombre,
sum(p.Precio*cd.Cantidad) as TotalPorParte,
sum(cd.Cantidad) as TotalPartesCotizadas,
avg(cd.cantidad) as PromedioPartesCotizadas
from Cotizacion C left join
CotizacionDetalle CD on C.IDCotizacion = CD.IDCotizacion inner join
Partes P on P.ID_Parte = cd.ID_Parte INNER JOIN
Categoria cat on Cat.ID_Categoria = p.ID_Categoria
group by cat.Nombre
")
rownames(dfsql) <- dfsql$Nombre
RepuestoNombre <- subset(dfsql, select = -c(Nombre))
Repuestos <- scale(RepuestoNombre)
Repuestos <- na.omit(Repuestos) #quitar los registros que estan en null
head(dfsql)
head(Repuestos)
set.seed(123) #seed permitira fijar un id para generar valores random
clusterk2 <- kmeans(Repuestos, 2, nstart = 25)
print(clusterk2)
#visualizacion de asignacion a cluster
clusterk2$cluster
#Tama?o de cada cluster
clusterk2$size
#Centros de los 4 clusters
clusterk2$centers
clusterk2$totss
clusterk2$withinss
clusterk2$tot.withinss
clusterk2$betweenss
clusterk2$iter
clusterk2$ifault
fviz_cluster(clusterk2, data = Repuestos)
clusterk3 <- kmeans(Repuestos, 3, nstart = 25)
clusterk4 <- kmeans(Repuestos, 4, nstart = 25)
clusterk5 <- kmeans(Repuestos, 5, nstart = 25)
clusterk6 <- kmeans(Repuestos, 6, nstart = 25)
grafica1 <- fviz_cluster(clusterk2, geom = "point", data = Repuestos) + ggtitle("k = 2")
grafica2 <- fviz_cluster(clusterk3, geom = "point",  data = Repuestos) + ggtitle("k = 3")
grafica3 <- fviz_cluster(clusterk4, geom = "point",  data = Repuestos) + ggtitle("k = 4")
grafica4 <- fviz_cluster(clusterk5, geom = "point",  data = Repuestos) + ggtitle("k = 5")
grafica5 <- fviz_cluster(clusterk6, geom = "point",  data = Repuestos) + ggtitle("k = 6")
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5 ,nrow = 2)
fviz_nbclust(Repuestos, kmeans, method = "wss") +
geom_vline(xintercept = 6, linetype = 2)
EstadosCluster4<-as.data.frame(clusterk4$cluster)
arrestrosRaw<-Repuestos
remove(arrestrosRaw)
RepuestosRaw<-Repuestos
RepuestosRaw
tst<-merge(EstadosCluster4,RepuestosRaw,by=0, all=TRUE)
names(tst)[2]<-"clustno"
tst<-subset(tst, select=-c(Row.names))
aggregate(tst,by=list(tst$clustno),FUN=mean)
fviz_cluster(clusterk4, data = Repuestos)
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5 ,nrow = 2)
library(gridExtra)
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5 ,nrow = 2)
clusterk7 <- kmeans(Repuestos, 7, nstart = 25)
grafica6 <- fviz_cluster(clusterk7, geom = "point",  data = Repuestos) + ggtitle("k = 7")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
grafica6 <- fviz_cluster(clusterk7, geom = "point",  data = Repuestos) + ggtitle("k = 7")
library(factoextra)
grafica6 <- fviz_cluster(clusterk7, geom = "point",  data = Repuestos) + ggtitle("k = 7")
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5,grafica6,nrow = 2)
View(clusterk2)
print(clusterk2)
install.packages('arules')
library('arules')
txn <- read.transactions ("Compras.csv",rm.duplicates = FALSE,format="single",sep=",",cols=c(1,2))
setwd("C:\\Users\\alexg\\Downloads")
txn <- read.transactions ("Compras.csv",rm.duplicates = FALSE,format="single",sep=",",cols=c(1,2))
View(txn)
View(txn)
#libreria para plotear arules
install.packages("arulesViz")
library("arulesViz")
plot(txn)
txn@itemInfo
image(txn)
plot(txn)
plot(txn, method = "graph", engine = "htmlwidget")
image(txn, method = "graph", engine = "htmlwidget")
plot(txn)
RulesCompras <- apriori(txn,parameter=list(sup=0.5,conf=0.9,target="rules"))
inspect(RulesCompras)
plot(RulesCompras, method = "graph", engine = "htmlwidget")
plot(RulesCompras, engine = "plotly") #plot interactivo
rules_high_lift <- head(sort(RulesCompras, by="lift"), 3)
inspect(rules_high_lift)
inspectDT(rules_high_lift)
grid.arrange(grafica1, grafica2, grafica3, grafica4, grafica5,grafica6,nrow = 2)
clusterk2$withinss
