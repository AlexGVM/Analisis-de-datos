getwd()
? getwd
? cars
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
ObjetoCadena<-"Esta es una cadena"
ObjetoEntero<- 2
ObjectoVector<- c(1:5)
str(ObjetoCadena)
str(ObjetoEntero)
str(ObjectoVector)
typef(ObjectoVector)
typeof(ObjectoVector)
class(ObjectoVector)
#Data frames
Temparaturas <- data.frame(Anios=c(2015,2016,2017,2018),
Invierno=c(5,8,7,10),
Primavera=c(10,12,15,13),
Verano=c(25,26,29,32),
Otonio=c(13,14,12,10)
)
str(Temperaturas)
rm(Temparaturas)
#Data frames
Temperaturas <- data.frame(Anios=c(2015,2016,2017,2018),
Invierno=c(5,8,7,10),
Primavera=c(10,12,15,13),
Verano=c(25,26,29,32),
Otonio=c(13,14,12,10)
)
str(Temperaturas)
class(Temperaturas)
Temperaturas
Temperaturas$Verano
head(Temperaturas,2)
tail(Temperaturas,1)
View(Temperaturas)
#dplyr
#Filtrar informacion
Temperaturas %>% filter(Anios=2018)
#dplyr
#Filtrar informacion
Temperaturas %>% filter(Anios==2018)
Temperaturas %>% slice(1:2)
Temperaturas
#Ordenar
Temperaturas %>% arrange(Invierno)
#Ordenar
Temperaturas %>% arrange(desc(Invierno))
#GroupBys
TemperaturasRandom <- data.frame(Anios=(sample(c(2015:2018),20,replace = TRUE)),
Invierno=rnorm(20, mean=2, sd=1),
Primavera=rnorm(20, mean=15, sd=3),
Verano=rnorm(20, mean=22, sd=4),
Otonio=rnorm(20, mean=10, sd=2)
)
View(TemperaturasRandom)
TemperaturasRandom %>% summarise(TemperaturaPromedio = mean(Invierno))
TemperaturasRandom %>% group_by(Anios)
TemperaturasRandom %>% group_by(Anios) %>% summarise(TemperaturaPromedio = mean(Invierno))
TemperaturasRandom %>% slice(1:5) %>% group_by(Anios) %>% summarise(TemperaturaPromedio = mean(Invierno))
TemperaturasRandom %>% group_by(Anios) %>% summarise(TemperaturaPromedio = mean(Invierno))
TemperaturasRandomPromedio <- TemperaturasRandom %>% group_by(Anios) %>% summarise(TemperaturaPromedio = mean(Invierno))
View(TemperaturasRandomPromedio)
ggplot(data=TemperaturasRandomPromedio, aes(x=Anios,y=TemperaturaPromedio))+
geom_line()+
geom_text(
label=TemperaturasRandomPromedio$TemperaturaPromedio,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T
)
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "Admisiones_DWH")
library(odbc)
con <- dbConnect(odbc(), Driver = "SQL Server", Server = "localhost",
Database = "Admisiones_DWH")
dfsql<- dbGetQuery(conn=con,"SELECT e.*,c.NombreFacultad
FROM Fact.Examen E INNER JOIN
Dimension.Carrera c on (e.sk_carrera = c.sk_carrera)")
View(dfsql)
Df_ConteoPorFacultad <- dfsql %>% count(NombreFacultad)
View(Df_ConteoPorFacultad)
ggplot(Df_ConteoPorFacultad, aes(x="", y=n, fill=NombreFacultad)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
data("USArrests")
View(Df_ConteoPorFacultad)
head(USArrests)
typeof(USArrests)
class(USArrests)
arrestos <- scale(USArrests) #
arrestos <- na.omit(arrestos)
install.packages("factoextra")
class(arrestos)
typeof(arrestos)
distancia <- get_dist(arrestos)
library(factoextra)
distancia <- get_dist(arrestos)
fviz_dist(distancia, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(123) #seed permitira fijar un id para generar valores random
clusterk2 <- kmeans(arrestos, 2, nstart = 25)
print(clusterk2)
#visualizacion de asignacion a cluster
clusterk2$cluster
luster
clusterk2$size
clusters
clusterk2$centers
fviz_cluster(clusterk4, data = arrestos)
fviz_cluster(clusterk4, data = arrestos
fviz_cluster(clusterk4, data = arrestos
fviz_cluster(clusterk4, data = arrestos
fviz_cluster(clusterk4, data = arrestos)
fviz_cluster(clusterk4, data = arrestos)
fviz_cluster(clusterk4, data = arrestos)
fviz_cluster(clusterk2, data = arrestos)
clusterk3 <- kmeans(arrestos, 3, nstart = 25)
clusterk4 <- kmeans(arrestos, 4, nstart = 25)
clusterk5 <- kmeans(arrestos, 5, nstart = 25)
grafica1 <- fviz_cluster(clusterk2, geom = "point", data = arrestos) + ggtitle("k = 2")
grafica2 <- fviz_cluster(clusterk3, geom = "point",  data = arrestos) + ggtitle("k = 3")
grafica3 <- fviz_cluster(clusterk4, geom = "point",  data = arrestos) + ggtitle("k = 4")
grafica4 <- fviz_cluster(clusterk5, geom = "point",  data = arrestos) + ggtitle("k = 5")
library(gridExtra)
grid.arrange(grafica1, grafica2, grafica3, grafica4, nrow = 2)
fviz_nbclust(arrestos, kmeans, method = "wss")
fviz_nbclust(arrestos, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(arrestos, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
EstadosCluster4<-as.data.frame(clusterk4$cluster)
arrestrosRaw<-USArrests
tst<-merge(EstadosCluster4,arrestrosRaw,by=0, all=TRUE)
View(tst)
names(tst)[2]<-"clustno"
tst<-subset(tst, select=-c(Row.names))
aggregate(tst,by=list(tst$clustno),FUN=mean)
fviz_cluster(clusterk4, data = arrestos)
class(USArrests)
arrestos <- scale(USArrests) #
head(arrestos)
head(USArrests)
arrestrosRaw<-USArrests
arrestrosRaw
tst<-subset(tst, select=-c(Row.names))
arrestos <- scale(USArrests)
arrestos <- na.omit(arrestos)
head(arrestos)
head(arrestos)
head(USArrests)
arrestos <- scale(USArrests)
arrestos <- na.omit(arrestos)
head(arrestos)
head(USArrests)
head(USArrests)
distancia <- get_dist(arrestos)
fviz_dist(distancia, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
set.seed(123) #seed permitira fijar un id para generar valores random
clusterk2 <- kmeans(arrestos, 2, nstart = 25)
print(clusterk2)
fviz_cluster(clusterk2, data = arrestos)
