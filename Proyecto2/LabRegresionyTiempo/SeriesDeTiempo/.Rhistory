install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
install.packages("DBI")
install.packages("DBI")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
dfsql = dbGetQuery(con,"
SELECT CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1)) AS
AnioTrimestreCotizacion,
SUM(cd.Cantidad * p.Precio) AS TotalCotizacion,
SUM(cd.Cantidad) AS TotalPartesVendidas,
AVG(cd.Cantidad * p.Precio) AS PromedioCotizacion
FROM dbo.Cotizacion c
INNER JOIN dbo.CotizacionDetalle cd
ON cd.IDCotizacion = c.IDCotizacion
INNER JOIN dbo.Partes p
ON p.ID_Parte = cd.ID_Parte
JOIN dbo.Vehiculo v
ON v.VehiculoID = cd.VehiculoID
GROUP BY CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1))
ORDER BY 1 ASC;
")
View(con)
View(dfsql)
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
install.packages("DBI")
# ALEXANDER VILLATORO 1182118
# LUIS CHUTÁ 1320016
# SERGIO LARA 1044418
# ANDRES GALVEZ 1024718
# Conectar a DB
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
#Data frames
dfsql = dbGetQuery(con,"
SELECT CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1)) AS
AnioTrimestreCotizacion,
SUM(cd.Cantidad * p.Precio) AS TotalCotizacion,
SUM(cd.Cantidad) AS TotalPartesVendidas,
AVG(cd.Cantidad * p.Precio) AS PromedioCotizacion
FROM dbo.Cotizacion c
INNER JOIN dbo.CotizacionDetalle cd
ON cd.IDCotizacion = c.IDCotizacion
INNER JOIN dbo.Partes p
ON p.ID_Parte = cd.ID_Parte
JOIN dbo.Vehiculo v
ON v.VehiculoID = cd.VehiculoID
GROUP BY CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1))
ORDER BY 1 ASC;
")
install.packages("DBI")
View(dfsql)
install.packages('ggplot')
library(ggplot2)
install.packages("forecast", dependencies=TRUE)
library(forecast)
set.seed(95)
ts1 <- ts(dfsql, start = c(2000,1), frequency = 4)
plot(ts1)
meanmodel <- meanf(ts1, h=80)
naivemodel <- naive(ts1, h=80)
driftmodel <- rwf(ts1, h=80, drift = T)
# la funcion window nos permite dividir un objeto "ts" de un inicio a un fin
ts80p <- window(ts1, start = 2000, end = 2015)
plot(ts80p)
meanmodel <- meanf(ts80p, h=80)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80, drift = T)
meanmodel <- meanf(ts80p, h=60)
naivemodel <- naive(ts80p, h=60)
driftmodel <- rwf(ts80p, h=60, drift = T)
plot(ts80p)
meanmodel <- meanf(ts80p, h=20)
meanmodel <- meanf(ts80p, h=60)
meanmodel <- meanf(ts80p, h=80)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80, drift = T)
adf.test(ts1)
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
adf.test(ts1)
install.packages("series")
install.packages("DBI")
library(series)
View(ts1)
meanmodel <- meanf(ts80p)
meanmodel <- meanf(ts1)
meanmodel <- meanf(ts1,h=80)
meanmodel <- meanf(ts1,h=4)
View(ts80p)
meanmodel <- meanf(ts80p,h=61)
meanmodel <- meanf(dfsql, h=20)
meanmodel <- meanf(ts1, h=20)
meanmodel <- meanf(ts1, h=100)
meanmodel <- meanf(ts1, h=62)
meanmodel <- meanf(ts1, h=61)
library(forecast)
meanmodel <- meanf(ts80p,h=61)
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
library(series)
ts80p <- na.omit(ts80p)
meanmodel <- meanf(ts80p,h=61)
View(ts80p)
meanmodel <- meanf(ts80p,h=30)
meanmodel <- meanf(ts80p,h=30)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80, drift = T)
meanmodel <- meanf(ts80p,h=30)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80, drift = T)
lines(naivemodel$mean, col=123, lwd = 2)
driftmodel <- rwf(ts80p, h=80, drift = T)
meanmodel <- meanf(ts80p,h=30)
driftmodel <- rwf(ts80p, h=80)
lines(driftmmodel$mean, col='red', lwd = 2)
lines(driftmodel$mean, col='red', lwd = 2)
meanmodel <- meanf(ts80p,h=80)
meanmodel <- meanf(ts80p,h=80)
View(ts80p)
meanmodel <- meanf(ts80p,h=10)
meanmodel <- meanf(ts80p)
ts1 <- ts(dfsql, start = c(2000,1), frequency = 4)
plot(ts1)
ts80p <- window(ts1, start = 2000, end = 2015)
plot(ts80p)
class(ts80p)
class(ts1)
typeof(ts80p)
typeof(ts1)
meanmodel <- meanf(ts1, h=60)
meanmodel <- meanf(ts1, h=80)
driftmodel <- rwf(ts1, h=80, drift = T)
plot(naivemodel, plot.conf = F, main = "")
plot(naivemodel$mean, col=123, lwd = 2)
plot(naivemodel$mean, col=123, lwd = 2,plot.type = F)
class(dfsql$AnioTrimestreCotizacion)
plot(ts1)
#naive
var(na.omit(naivem$residuals))
mean(na.omit(naivem$residuals))
meanmodel <- meanf(dfsql,h=80)
meanmodel <- meanf(ts1,h=80)
ts1
meanmodel <- meanf(ts1,h=80)
View(ts1)
meanmodel <- meanf(ts1,h=79)
ts1 <- ts(dfsql$AnioTrimestreCotizacion~dfsql$TotalCotizacion, start = c(2000,1), frequency = 4)
plot(ts1)
ts1 <- ts(dfsql, start = c(2000,1), frequency = 4)
plot(ts1)
# la funcion window nos permite dividir un objeto "ts" de un inicio a un fin
ts80p <- window(ts1, start = 2000, end = 2015)
plot(ts80p)
df1 <- dfsql %>% select(AnioTrimestreCotizacion, TotalCotizacion)
View(df1)
ts2 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts2)
View(ts2)
meanmodel <- meanf(ts2,h=80)
dfsql <- dfsql %>% select(-c(AnioTrimestreCotizacion))
View(dfsql)
ts1 <- ts(dfsql, start = c(2000,1), frequency = 4)
plot(ts1)
meanmodel <- meanf(ts1,h=80)
rmite dividir un objeto "ts" de un inicio a un fin
ts80p <- window(ts1, start = 2000, end = 2015)
plot(ts80p)
meanmodel <- meanf(ts1,h=80)
meanmodel <- meanf(ts80p,h=80)
meanmodel <- meanf(ts80p,h=80)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80)
df1 <- dfsql %>% select(AnioTrimestreCotizacion, TotalCotizacion)
ts1 <-ts(df1)
dfsql = dbGetQuery(con,"
SELECT CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1)) AS
AnioTrimestreCotizacion,
SUM(cd.Cantidad * p.Precio) AS TotalCotizacion,
SUM(cd.Cantidad) AS TotalPartesVendidas,
AVG(cd.Cantidad * p.Precio) AS PromedioCotizacion
FROM dbo.Cotizacion c
INNER JOIN dbo.CotizacionDetalle cd
ON cd.IDCotizacion = c.IDCotizacion
INNER JOIN dbo.Partes p
ON p.ID_Parte = cd.ID_Parte
JOIN dbo.Vehiculo v
ON v.VehiculoID = cd.VehiculoID
GROUP BY CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1))
ORDER BY 1 ASC;
")
df1 <- dfsql %>% select(AnioTrimestreCotizacion, TotalCotizacion)
ts1 <-ts(df1)
plot(ts1)
ts1 <-ts(df1)
plot(ts1)
meanmodel <- meanf(ts1,h=80)
library(timeSeries)
install.packages("timeSeries")
library(timeSeries)
meanmodel <- meanf(ts1,h=80)
meanmodel <- meanf(ts1,tsp(ts1))
meanmodel <- meanf(ts1,tsp(h=80))
meanmodel <- meanf(ts1,tsp())
meanmodel <- meanf(ts1,tsp(x))
meanmodel <- meanf(ts1,tsp(x=ts1))
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
df1
df1 <- dfsql %>% select(TotalCotizacion)
df1
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
# la funcion window nos permite dividir un objeto "ts" de un inicio a un fin
ts180p <- window(ts1, start = 2000, end = 2015)
plot(ts180p)
meanmodel <- meanf(ts180p,h=80)
naivemodel <- naive(ts80p, h=80)
driftmodel <- rwf(ts80p, h=80)
View(dfsql)
View(dfsql)
df1 <- dfsql %>% select(TotalCotizacion)
df2 <- dfsql %>% select(TotalPartesVendidas)
df3 <- dfsql %>% select(PromedioCotizacion)
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
ts2 <- ts(df2, start = c(2000,1), frequency = 4)
plot(ts2)
ts3 <- ts(df3, start = c(2000,1), frequency = 4)
plot(ts3)
plot(ts3)
View(dfsql)
# la funcion window nos permite dividir un objeto "ts" de un inicio a un fin
ts180p <- window(ts1, start = 2000, end = 2015)
plot(ts180p)
ts280p <- window(ts2, start = 2000, end = 2015)
plot(ts280p)
ts380p <- window(ts3, start = 2000, end = 2015)
plot(ts380p)
plot(ts380p)
meanmodel <- meanf(ts180p,h=80)
naivemodel <- naive(ts180p, h=80)
driftmodel <- rwf(ts180p, h=80)
meanmodel2 <- meanf(ts280p,h=80)
naivemodel2 <- naive(ts280p, h=80)
driftmodel2 <- rwf(ts280p, h=80)
meanmodel3 <- meanf(ts380p,h=80)
naivemodel3 <- naive(ts380p, h=80)
driftmodel3 <- rwf(ts380p, h=80)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmmodel$mean, col='red', lwd = 2)
plot(meanmodel3, plot.conf = F, main = "")
lines(naivemodel3$mean, col=123, lwd = 2)
lines(driftmmodel3$mean, col='red', lwd = 2)
plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmmodel2$mean, col='red', lwd = 2)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmmodel$mean, col='red', lwd = 2)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmmodel$mean, col='red', lwd = 2)
meanmodel <- meanf(ts180p,h=80)
naivemodel <- naive(ts180p, h=80)
driftmodel <- rwf(ts180p, h=80)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmmodel$mean, col='red', lwd = 2)
meanmodel <- meanf(ts180p,h=80)
naivemodel <- naive(ts180p, h=80)
driftmodel <- rwf(ts180p, h=80)
meanmodel2 <- meanf(ts280p,h=80)
naivemodel2 <- naive(ts280p, h=80)
driftmodel2 <- rwf(ts280p, h=80)
meanmodel3 <- meanf(ts380p,h=80)
naivemodel3 <- naive(ts380p, h=80)
driftmodel3 <- rwf(ts380p, h=80)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmodel$mean, col='red', lwd = 2)
plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmodel2$mean, col='red', lwd = 2)
plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmodel2$mean, col='red', lwd = 2)
plot(meanmodel3, plot.conf = F, main = "")
lines(naivemodel3$mean, col=123, lwd = 2)
lines(driftmodel3$mean, col='red', lwd = 2)
plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmodel2$mean, col='red', lwd = 2)
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmodel$mean, col='red', lwd = 2)
plot(meanmodel3, plot.conf = F, main = "") +
lines(naivemodel3$mean, col=123, lwd = 2) +
lines(driftmodel3$mean, col='red', lwd = 2)
pruebas < -  plot(meanmodel3, plot.conf = F, main = "")
lines(naivemodel3$mean, col=123, lwd = 2)
lines(driftmodel3$mean, col='red', lwd = 2)
library(gridExtra)
grid.arrange(pruebas,nrow = 2)
pruebas1 < - plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmodel2$mean, col='red', lwd = 2)
pruebas1 <- plot(meanmodel2, plot.conf = F, main = "")
lines(naivemodel2$mean, col=123, lwd = 2)
lines(driftmodel2$mean, col='red', lwd = 2)
pruebas <-  plot(meanmodel3, plot.conf = F, main = "")
lines(naivemodel3$mean, col=123, lwd = 2)
lines(driftmodel3$mean, col='red', lwd = 2)
library(gridExtra)
grid.arrange(pruebas,pruebas1,nrow = 2)
library(gridExtra)
grid.arrange(pruebas,pruebas1,nrow = 1)
acf(meanmodel$residuals)
adf.test(ts180p)
library(tseries)
adf.test(ts180p)
adf.test(ts280p)
plot(ts180p)
adf.test(ts380p)
adf.test(ts180p)
acf(meanmodel$residuals)
acf(meanmodel2$residuals)
acf(meanmodel3$residuals)
