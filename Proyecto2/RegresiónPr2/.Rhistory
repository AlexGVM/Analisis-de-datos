dfsql2 <- dfsql[-dfsqlindex,] #20%
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
dfsql1
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsql
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
lmHeight1 = lm(Cantidad~Anio, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql1
for (i in c("Anio")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
lmHeight1 = lm(Cantidad~Anio, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
View(dfsql)
dfsql1
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("Anio","Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
lmHeight = lm(Cantidad~Anio+Marca+Modelo+NombreParte+NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
lmHeight1 = lm(Cantidad~Anio, data = dfsql1) #Create the linear regression
lmHeight1
dfsql1
dfsql
View(dfsql)
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
#Data frames
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfs6ql)
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql1
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
lmHeight = lm(Cantidad~Anio+Marca+Modelo+NombreParte+NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
lmHeight1 = lm(Cantidad~Marca, data = dfsql1) #Create the linear regression
summary(lmHeight1) #Review the results
summary(lmHeight) #Review the results
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql1
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
lmHeight = lm(Cantidad~Anio+Marca+Modelo+NombreParte+NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
lmHeight2 = lm(Cantidad~Anio, data = dfsql1) #Create the linear regression
summary(lmHeight2) #Review the results
lmHeight2 = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
summary(lmHeight2) #Review the results
plot(Cantidad~Anio, data=dfsql)
plot(Cantidad~Anio, data=dfsql1)
plot(Cantidad~Marca, data=dfsql1)
plot(Cantidad~Modelo, data=dfsql1)
plot(Cantidad~NombreParte, data=dfsql1)
plot(Cantidad~NombreDescuento, data=dfsql1)
dfsql3 <-  dfsql1 %>% select(c("Anio","Marca","Modelo"))
View(dfsql3)
rm(dfsql3)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("Marca","Modelo","NombreParte","NombreDescuento")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql3 <- dfsql1 %>% select(c("Anio","Marca","Modelo","Cantidad"))
dfsql3$Auto <- paste(dfsql3$Anio, "-", dfsql3$Marca, "-" , dfsql3$Modelo)
View(dfsql3)
lmHeight2 = lm(Cantidad~Auto, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
summary(lmHeight2) #Review the results
lmHeight2 = lm(Cantidad~Auto, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
for (i in c("Auto")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
for (i in c("Auto")) {
dfsql3[,i]=as.numeric(dfsql3[,i])
}
View(dfsql3)
lmHeight2 = lm(Cantidad~Auto, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
#Data frames
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql3 <- dfsql1 %>% select(c("Anio","Marca","Modelo","Cantidad", "NombreParte","NombreDescuento"))
dfsql3$Auto <- paste(dfsql3$Anio, "-", dfsql3$Marca, "-" , dfsql3$Modelo)
View(dfsql3)
for (i in c("Auto")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
for (i in c("Auto")) {
dfsql3[,i]=as.numeric(dfsql3[,i])
}
View(dfsql3)
lmHeight2 = lm(Cantidad~Auto + NombreParte + NombreDescuento, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
lmHeight2 = lm(Cantidad~NombreDescuento, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
for (i in c("Auto","NombreDescuento","NombreDescuento")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
for (i in c("Auto","NomDescuento","NombreDescuento")) {
dfsql3[,i]=as.numeric(dfsql3[,i])
}
for (i in c("Auto","NombreDescuento","NombreParte")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
for (i in c("Auto","NombreDescuento","NombreParte")) {
dfsql3[,i]=as.numeric(dfsql3[,i])
}
lmHeight2 = lm(Cantidad~NombreDescuento, data = dfsql3) #Create the linear regression
View(dfsql3)
lmHeight2 = lm(Cantidad~NombreDescuento + NombreParte + Auto, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
lmHeight2 = lm(Auto~NombreDescuento + NombreParte + Cantidad, data = dfsql3) #Create the linear regression
summary(lmHeight2) #Review the results
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql3 <- dfsql1 %>% select(c("Cantidad", "NombreParte","NombreDescuento"))
dfsql3$Auto <- paste(dfsql1$Anio, "-", dfsql1$Marca, "-" , dfsql1$Modelo)
View(dfsql3)
install.packages("dummies")
library(dummies)
dfsql3 <- dummy.data.frame(dfsql3, names=c("Cantidad", "NombreParte","NombreDescuento"), sep="_")
dfsql3 <- dummy.data.frame(dfsql3, names=c("Cantidad", "NombreParte","NombreDescuento","Auto"), sep="_")
for (i in c("Cantidad", "NombreParte","NombreDescuento","Auto")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
View(dfsql3)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
dfsql3 <- dfsql1 %>% select(c("Cantidad", "NombreParte","NombreDescuento"))
dfsql3$Auto <- paste(dfsql1$Anio, "-", dfsql1$Marca, "-" , dfsql1$Modelo)
dfsql3 <- dummy.data.frame(dfsql3, names=c("NombreParte","NombreDescuento","Auto"), sep="_")
View(dfsql3)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
View(dfsql1)
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
install.packages("DBI")
install.packages("DBI")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
for (i in c("NombreParte","NombreDescuento","Anio","Marca","Modelo")) {
dfsql3[,i]=as.factor(dfsql3[,i])
}
for (i in c("NombreParte","NombreDescuento","Anio","Marca","Modelo")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("NombreParte","NombreDescuento","Anio","Marca","Modelo")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
View(dfsql1)
View(dfsql1)
lmHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
lmHeight2 = lm(Cantidad~NombreParte, data = dfsql1) #Create the linear regression
lmHeight3 = lm(Cantidad~NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight3)
summary(lmHeight) #Review the results
summary(lmHeight2)
.libPaths()
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
install.packages("DBI")
# ALEXANDER VILLATORO 1182118
# LUIS CHUTÁ 1320016
# SERGIO LARA 1044418
# ANDRES GALVEZ 1024718
# Conectar a DB
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
#Data frames
dfsql = dbGetQuery(con,"
select R.Nombre as NombreRegion, CA.Nombre as NombreCategoria, V.Marca, O.Total_Orden
from Region R inner join Ciudad C on (R.ID_Region = C.ID_Region)
inner join Orden O on (C.ID_Ciudad = O.ID_Ciudad) inner join
Detalle_orden DO on (O.ID_Orden = DO.ID_Orden) inner join
Partes P on (P.ID_Parte = DO.ID_Parte) inner join
Categoria CA on (CA.ID_Categoria = P.ID_Categoria) inner join
Vehiculo V on (V.VehiculoID = DO.VehiculoID)
")
install.packages("DBI")
dfsql <- na.omit(dfsql)
#Data frames
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
for (i in c("NombreParte","NombreDescuento","Marca","Modelo")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("NombreParte","NombreDescuento","Marca","Modelo")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
lmHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
lmHeight2 = lm(Cantidad~NombreParte, data = dfsql1) #Create the linear regression
summary(lmHeight2)
lmHeight3 = lm(Cantidad~NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight3)
#Data frames
dfsqlL = dbGetQuery(con,"
select R.Nombre as NombreRegion, CA.Nombre as NombreCategoria, V.Marca, O.Total_Orden
from Region R inner join Ciudad C on (R.ID_Region = C.ID_Region)
inner join Orden O on (C.ID_Ciudad = O.ID_Ciudad) inner join
Detalle_orden DO on (O.ID_Orden = DO.ID_Orden) inner join
Partes P on (P.ID_Parte = DO.ID_Parte) inner join
Categoria CA on (CA.ID_Categoria = P.ID_Categoria) inner join
Vehiculo V on (V.VehiculoID = DO.VehiculoID)
"
)
dfsqlL <- na.omit(dfsqlL)
dfsqlindexL <- sample(1:nrow(dfsqlL), 0.8*nrow(dfsqlL))
dfsqlL1 <- dfsqlL[dfsqlindexL,] #80%
dfsqlL2 <- dfsqlL[-dfsqlindexL,] #20%
dfsql1
dfsqlL1
dfsqlL = dbGetQuery(con,"
select * from VW_TotalOrdenNombres
"
)
dfsqlL <- na.omit(dfsqlL)
dfsqlindexL <- sample(1:nrow(dfsqlL), 0.8*nrow(dfsqlL))
dfsqlL1 <- dfsqlL[dfsqlindexL,] #80%
dfsqlL2 <- dfsqlL[-dfsqlindexL,] #20%
dfsqlL1
for (i in c("NombreRegion","NombreCategoria","Marca")) {
dfsqlL1[,i]=as.factor(dfsqlL1[,i])
}
for (i in c("NombreRegion","NombreCategoria","Marca")) {
dfsqlL1[,i]=as.numeric(dfsqlL1[,i])
}
dfsqlL1
lmHeight = lm(Total_Orden~NombreRegion+NombreCategoria+Marca, data = dfsqlL1) #Create the linear regression
lmHeightL = lm(Total_Orden~NombreRegion+NombreCategoria+Marca, data = dfsqlL1) #Create the linear regression
summary(lmHeightL) #Review the results
lmHeightL2 = lm(Total_Orden~NombreRegion, data = dfsqlL1) #Create the linear regression
summary(lmHeightL2) #Review the results
dfsqlL = dbGetQuery(con,"
select R.Nombre as NombreRegion, CA.Nombre as NombreCategoria, V.Marca, O.Total_Orden, DO.Cantidad,P.Precio
from Region R inner join Ciudad C on (R.ID_Region = C.ID_Region)
inner join Orden O on (C.ID_Ciudad = O.ID_Ciudad) inner join
Detalle_orden DO on (O.ID_Orden = DO.ID_Orden) inner join
Partes P on (P.ID_Parte = DO.ID_Parte) inner join
Categoria CA on (CA.ID_Categoria = P.ID_Categoria) inner join
Vehiculo V on (V.VehiculoID = DO.VehiculoID)
"
)
dfsqlL <- na.omit(dfsqlL)
dfsqlindexL <- sample(1:nrow(dfsqlL), 0.8*nrow(dfsqlL))
dfsqlL1 <- dfsqlL[dfsqlindexL,] #80%
dfsqlL2 <- dfsqlL[-dfsqlindexL,] #20%
for (i in c("NombreRegion","NombreCategoria","Marca")) {
dfsqlL1[,i]=as.factor(dfsqlL1[,i])
}
for (i in c("NombreRegion","NombreCategoria","Marca")) {
dfsqlL1[,i]=as.numeric(dfsqlL1[,i])
}
dfsqlL1
lmHeightL = lm(Total_Orden~NombreRegion+NombreCategoria+Marca+Cantidad+Precio, data = dfsqlL1) #Create the linear regression
summary(lmHeightL) #Review the results
lmHeightL2 = lm(Total_Orden~Precio, data = dfsqlL1) #Create the linear regression
summary(lmHeightL2) #Review the results
lmHeightL2 = lm(Total_Orden~Cantidad, data = dfsqlL1) #Create the linear regression
summary(lmHeightL2) #Review the results
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
dfsql <- na.omit(dfsql)
dfsqlindex <- sample(1:nrow(dfsql), 0.8*nrow(dfsql))
dfsql1 <- dfsql[dfsqlindex,] #80%
dfsql2 <- dfsql[-dfsqlindex,] #20%
for (i in c("NombreParte","NombreDescuento","Marca","Modelo")) {
dfsql1[,i]=as.factor(dfsql1[,i])
}
for (i in c("NombreParte","NombreDescuento","Marca","Modelo")) {
dfsql1[,i]=as.numeric(dfsql1[,i])
}
dfsql1
lmHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
plot(Cantidad~NombreParte, data = dfsql1)
abline(lm(Cantidad~Anio+Marca+Modelo, data = dfsql1), col="red")
#---------------------------------------------------
abline(lm(Cantidad~NombreParte, data = dfsql1), col="red")
lmHeight3 = lm(Cantidad~NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight3)
boxplot(Cantidad~NombreParte, main="Nombre Parte", sub=paste("Outlier rows: ", boxplot.stats(Cantidad~NombreParte)$out))
boxplot(Cantidad~NombreParte, main="Nombre Parte", sub=paste("Outlier rows: ", boxplot.stats(Cantidad~NombreParte)$out), data = dfsql1)
dfsql1
mHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
lmHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
rm(mHeight)
lmHeight = lm(Cantidad~Anio+Marca+Modelo, data = dfsql1) #Create the linear regression
summary(lmHeight) #Review the results
summary(lmHeight) #Review the results
boxplot(dfsql1~NombreParte, main="Nombre Parte", sub=paste("Outlier rows: ", boxplot.stats(dfsql1~NombreParte)$out))
#----------------------------------------------------------
dfsql1
boxplot(dfsql1$NombreParte, main="Nombre Parte", sub=paste("Outlier rows: ", boxplot.stats(dfsql1$NombreParte)$out))
boxplot(dfsql1$NombreDescuento, main="Nombre Descuento ", sub=paste("Outlier rows: ", boxplot.stats(dfsql1$NombreDescuento)$out))
#----------------------------------------------------------
summary(lmHeight) #
lmHeight2 = lm(Cantidad~NombreParte, data = dfsql1) #Create the linear regression
summary(lmHeight2)
lmHeight3 = lm(Cantidad~NombreDescuento, data = dfsql1) #Create the linear regression
summary(lmHeight3)
plot(Cantidad~NombreParte, data = dfsql1)
scatter.smooth(x=dfsql1$Cantidad, y+dfsql1$Anio, main = "Cantidad - Año")
scatter.smooth(x=dfsql1$Cantidad, y=dfsql1$Anio, main = "Cantidad - Año")
scatter.smooth(y=dfsql1$Cantidad, x=dfsql1$Anio, main = "Cantidad - Año")
#----------------------------------------------------------
plot(meanmodel, plot.conf = F, main = "")
lines(naivemodel$mean, col=123, lwd = 2)
lines(driftmodel$mean, col='red', lwd = 2)
legend("topleft",lty=1,col=c(4,123,22),
legend=c("Mean","Naive","Drift"))
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
install.packages("forecast", dependencies=TRUE)
library(forecast)
install.packages('ggplot')
library(ggplot2)
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
library(ggplot2)
library(dplyr)
library(DBI)
library(odbc)
library(tseries)
con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "DESKTOP-0PP45D4",
Database = "RepuestosWeb", timeout = 50)
dfsql = dbGetQuery(con,"
SELECT CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1)) AS
AnioTrimestreCotizacion,
SUM(cd.Cantidad * p.Precio) AS TotalCotizacion,
SUM(cd.Cantidad) AS TotalPartesVendidas,
AVG(cd.Cantidad * p.Precio) AS PromedioCotizacion
FROM dbo.Cotizacion c
INNER JOIN dbo.CotizacionDetalle cd
ON cd.IDCotizacion = c.IDCotizacion
INNER JOIN dbo.Partes p
ON p.ID_Parte = cd.ID_Parte
JOIN dbo.Vehiculo v
ON v.VehiculoID = cd.VehiculoID
GROUP BY CAST(DATEPART(YEAR,c.FechaCreacion) AS VARCHAR(4)) + '-' +
CAST(DATEPART(QUARTER,c.FechaCreacion) AS VARCHAR(1))
ORDER BY 1 ASC;
")
df1 <- dfsql %>% select(TotalCotizacion)
df2 <- dfsql %>% select(TotalPartesVendidas)
df3 <- dfsql %>% select(PromedioCotizacion)
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
ts1 <- ts(df1, start = c(2000,1), frequency = 4)
plot(ts1)
ts2 <- ts(df2, start = c(2000,1), frequency = 4)
plot(ts2)
ts3 <- ts(df3, start = c(2000,1), frequency = 4)
plot(ts3)
# la funcion window nos permite dividir un objeto "ts" de un inicio a un fin
ts180p <- window(ts1, start = 2000, end = 2015)
plot(ts180p)
ts280p <- window(ts2, start = 2000, end = 2015)
plot(ts280p)
ts380p <- window(ts3, start = 2000, end = 2015)
plot(ts380p)
meanmodel <- meanf(ts180p,h=80)
naivemodel <- naive(ts180p, h=80)
driftmodel <- rwf(ts180p, h=80)
acf(meanmodel$residuals)
library(tseries)
auto.arima(ts180p)
arima(ts180p)
myar = auto.arima(ts180p, stepwise = F, approximation = F)
myar
vs original
plot(ts180p, lwd = 3)
lines(myar$fitted, col = "red")
acf(ts180p, lag.max = 20)
pacf(ts180p, lag.max = 20)
auto.arima(ts180p)
arima(ts180p)
myar = auto.arima(ts180p, stepwise = F, approximation = F)
myar
# Ploteamos vs original
plot(ts180p, lwd = 3)
lines(myar$fitted, col = "red")
dfsql = dbGetQuery(con,"
select * from V_CantidadPorVehiculoyDescuento;
")
dfsql
View(dfsql)
boxplot(dfsql1$Marca, main="Nombre Descuento ", sub=paste("Outlier rows: ", boxplot.stats(dfsql1$Marca)$out))
boxplot(dfsql1$Marca, main="Marca", sub=paste("Outlier rows: ", boxplot.stats(dfsql1$Marca)$out))
